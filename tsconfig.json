{
  "compilerOptions": {
    "target": "esnext",
    "module": "esnext",
    /* 模块解析选项 */
    "moduleResolution": "node", // 选择模块解析策略： 'node' (Node.js) or 'classic' (TypeScript pre-1.6)
    "baseUrl": "./", // 用于解析非相对模块名称的基目录

    "allowSyntheticDefaultImports": true, // 用来指定允许从没有默认导出的模块中默认导入
    "strictFunctionTypes": true, // 用来指定是否使用函数参数双向协变检查
    "jsx": "preserve", // 指定 jsx 代码用于的开发环境，preserve、react-native、react
    "allowJs": true, // 允许编译 javascript 文件
    "sourceMap": false, // 生成相应的 '.map' 文件
    "esModuleInterop": true, // 通过导入内容创建命名空间，实现 CommonJS 和 ES 模块之间的互操作性
    "experimentalDecorators": true, // 启用装饰器
    "lib": ["dom", "esnext"],
    "types": ["vite/client"],
    "typeRoots": ["./node_modules/@types/", "./types",  "./types/components_form"],
    "skipLibCheck": true,

    "strict": true, // 启用所有严格类型检查选项
    "noImplicitAny": true, // 在表达式和声明上有隐含的 any类型时报错
    "noImplicitThis": true, // 当 this 表达式值为 any 类型的时候，生成一个错误
    "strictNullChecks": false, // 启用严格的 null 检查
    "alwaysStrict": false, // 以严格模式检查每个模块，并在每个文件里加入 'use strict'

    /* 额外的检查 */
    "noUnusedLocals": false, // 有未使用的变量时，抛出错误
    "noUnusedParameters": false, // 有未使用的参数时，抛出错误
    "noImplicitReturns": false, // 并不是所有函数里的代码都有返回值时，抛出错误
    "noFallthroughCasesInSwitch": true, // 报告 switch 语句的 fallthrough 错误。（即，不允许 switch 的 case 语句贯穿）

    "paths": {
      "@/*": ["src/*"],
    }
  },
  "include": [
    "src/**/*.ts",
    "src/**/*.d.ts",
    "src/**/*.tsx",
    "src/**/*.vue",
    "types/**/*.d.ts",
    "types/**/*.ts",
    "build/**/*.ts",
    "build/**/*.d.ts",
    "mock/**/*.ts",
    "vite.config.ts"
  ],
  "exclude": ["node_modules", "dist", "**/*.js"]
}
